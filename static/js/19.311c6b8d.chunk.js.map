{"version":3,"file":"static/js/19.311c6b8d.chunk.js","mappings":"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","sources":["webpack://vulpes-storage/./src/components/PopUp/PopUp.module.css?1d5e","components/PopUp/PopUp.js","webpack://vulpes-storage/./src/components/Scanner/ProductByBarcode/ProductByBarcode.module.css?7a4d","components/Scanner/ProductByBarcode/ProductByBarcode.js","pages/Scanner.js","redux/products/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalCloseButton\":\"PopUp_modalCloseButton__m06-1\",\"menuIcon\":\"PopUp_menuIcon__5-11v\"};","import svgIcons from '../../images/icons.svg';\nimport Modal from 'react-modal';\nimport css from './PopUp.module.css';\n\nexport const PopUp = ({ isOpen, close, body }) => {\n\n    const customStyles = {\n        overlay: { \n            backgroundColor: 'rgba(9, 9, 9, 0.75)',\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n        },\n        content: {\n            position: 'relative',\n            top: 'auto',\n            left: 'auto',\n            right: 'auto',\n            bottom: 'auto',\n            minWidth: '300px',\n            maxWidth: '80%',\n            width: 'auto',\n            maxHeight: '80%',\n            padding: '50px 20px',\n            borderRadius: '12px',\n            border: '2px solid black',\n            backgroundColor: 'FFF',\n            transition: 'top 0.3s ease-in-out',\n        },\n      };\n\n    return (\n        <Modal\n            isOpen={isOpen}\n            onRequestClose={close}\n            style={customStyles}\n            ariaHideApp={false}\n        >\n            <button className={css.modalCloseButton} type=\"button\" onClick={close}>\n                <svg className={css.menuIcon}>\n                    <use href={`${svgIcons}#icon-close-circle`}></use>\n                </svg>\n            </button>\n            {body}\n        </Modal>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ProductByBarcode_container__I+StQ\",\"videoArea\":\"ProductByBarcode_videoArea__DWxuM\",\"hide\":\"ProductByBarcode_hide__MRSzl\",\"modalArea\":\"ProductByBarcode_modalArea__aleCt\",\"modalImage\":\"ProductByBarcode_modalImage__P9h42\",\"button\":\"ProductByBarcode_button__BBdqD\"};","import { useEffect, useRef, useState } from 'react';\nimport css from './ProductByBarcode.module.css';\nimport { BrowserMultiFormatReader } from '@zxing/library';\nimport { getProductByBarcode } from '../../../redux/products/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectActiveProduct } from '../../../redux/products/selectors';\n// import { clearActiveProduct } from '../../../redux/products/slice';\nimport { PopUp } from 'components/PopUp/PopUp';\n\nexport const ProductByBarcode = () => {\n  const dispatch = useDispatch();\n  const activeItem = useSelector(selectActiveProduct);\n  const videoRef = useRef(null);\n  const selectRef = useRef(null);\n  const [devices, setDevices] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState('');\n  const [result, setResult] = useState(null);\n  const [lastResult, setLastResult] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [activeScanner, setActiveScanner] = useState(false);\n\n  const codeReader = useRef(new BrowserMultiFormatReader());\n\n  useEffect(() => {\n    const reader = codeReader.current;\n\n    navigator.mediaDevices\n      .getUserMedia({ video: true })\n      .then(() => {\n        return reader.listVideoInputDevices();\n      })\n      .then(videoInputDevices => {\n        setDevices(videoInputDevices);\n        if (videoInputDevices.length > 0) {\n          setSelectedDeviceId(videoInputDevices[0].deviceId);\n        }\n      })\n      .catch(err => {\n        console.error('Ошибка доступа к камере:', err);\n      });\n\n    return () => {\n      reader.reset();\n    };\n  }, []);\n\n  const startScan = () => {\n    setActiveScanner(true);\n    if (!selectedDeviceId) return;\n\n    codeReader.current.decodeFromVideoDevice(\n      selectedDeviceId,\n      videoRef.current,\n      async (result, err) => {\n        if (result) {\n          try {\n            setLastResult(result.text);\n            dispatch(getProductByBarcode(result.text));\n\n            // const res = await fetch(`/api/products/${result.text}`);\n            // const contentType = res.headers.get('content-type');\n\n            // if (contentType && contentType.includes('application/json')) {\n            //   const data = await res.json();\n\n            //   if (res.status === 200) {\n            //     setResult({\n            //       name: data.name,\n            //       article: data.article,\n            //       barcode: data.barcode,\n            //     });\n            //   } else {\n            //     setResult({ error: data.message });\n            //   }\n            // } else {\n            //   const text = await res.text();\n            //   console.error('Сервер вернул не JSON:', text);\n            // }\n          } catch (error) {\n            console.error(error);\n            setResult({ error: 'Ошибка запроса к серверу' });\n          }\n        }\n      }\n    );\n  };\n\n  const stopScan = () => {\n    setActiveScanner(false);\n    codeReader.current.reset();\n    setResult(null);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  useEffect(() => {\n    if (activeItem && activeItem.article) {\n      stopScan();\n      setIsModalOpen(true);\n    }\n    if (activeItem === null) {\n      setIsModalOpen(true);\n      stopScan();\n    }\n  }, [activeItem, result]);\n\n  return (\n    <div className={css.container}>\n      <div className={css.scanBlock}>\n        <video ref={videoRef} className={activeScanner ? css.videoArea : css.hide} />\n      </div>\n\n      <div className={css.buttonsBlock}>\n        <button className={css.button} onClick={startScan}>\n          Start\n        </button>\n        <button className={css.button} onClick={stopScan}>\n          Reset\n        </button>\n      </div>\n\n      <div className={css.scanBlock}>\n        <label htmlFor=\"sourceSelect\">Change video source:</label>\n        <select\n          ref={selectRef}\n          id=\"sourceSelect\"\n          value={selectedDeviceId}\n          onChange={e => setSelectedDeviceId(e.target.value)}\n        >\n          {devices.map(device => (\n            <option key={device.deviceId} value={device.deviceId}>\n              {device.label || `Camera ${device.deviceId}`}\n            </option>\n          ))}\n        </select>\n      </div>\n      <PopUp\n        isOpen={isModalOpen}\n        close={closeModal}\n        body={\n          activeItem && activeItem.article ? (\n            <div className={css.modalArea}>\n              {Array.isArray(activeItem.images) &&\n              activeItem.images.length > 0 ? (\n                <img\n                  className={css.modalImage}\n                  alt=\"scanned product\"\n                  src={activeItem.images[0]}\n                />\n              ) : (\n                <p>No image</p>\n              )}\n              <p>{`${activeItem.name?.UA || 'Без названия'} (${\n                activeItem.article\n              })`}</p>\n              <p>\n                {activeItem.price?.UAH\n                  ? `${activeItem.price.UAH} грн.`\n                  : 'Цена не указана'}\n              </p>\n            </div>\n          ) : activeItem === null ? (\n            <div>\n              <p>Товар не найден!</p>\n              <p>Штрихкод: {lastResult}</p>\n            </div>\n          ) : null\n        }\n      />\n    </div>\n  );\n};\n","import { ProductByBarcode } from '../components/Scanner/ProductByBarcode/ProductByBarcode';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n// import { useSelector } from 'react-redux';\n// import { selectUser } from '../redux/auth/selectors';\n\n  \n  export default function Home() {\n\n    // const user = useSelector(selectUser);\n\n    return (\n    <HelmetProvider>\n      <div>\n        <Helmet>\n          <title>Scanner</title>\n        </Helmet>\n        <ProductByBarcode />\n      </div>\n    </HelmetProvider>\n    );\n  }","export const selectAllProducts = state => state.products.items;\nexport const selectActiveProduct = state => state.products.activeItem;"],"names":["PopUp","isOpen","close","body","onRequestClose","style","overlay","backgroundColor","position","top","left","right","bottom","display","justifyContent","alignItems","content","minWidth","maxWidth","width","maxHeight","padding","borderRadius","border","transition","ariaHideApp","className","css","type","onClick","href","svgIcons","ProductByBarcode","dispatch","useDispatch","activeItem","useSelector","selectActiveProduct","videoRef","useRef","selectRef","useState","devices","setDevices","selectedDeviceId","setSelectedDeviceId","result","setResult","lastResult","setLastResult","isModalOpen","setIsModalOpen","activeScanner","setActiveScanner","codeReader","BrowserMultiFormatReader","useEffect","reader","current","navigator","mediaDevices","getUserMedia","video","then","listVideoInputDevices","videoInputDevices","length","deviceId","catch","err","console","error","reset","stopScan","article","ref","decodeFromVideoDevice","text","getProductByBarcode","htmlFor","id","value","onChange","e","target","map","device","label","Array","isArray","images","alt","src","name","UA","price","UAH","Home","selectAllProducts","state","products","items"],"sourceRoot":""}