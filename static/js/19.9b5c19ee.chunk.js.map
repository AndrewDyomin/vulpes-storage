{"version":3,"file":"static/js/19.9b5c19ee.chunk.js","mappings":"sNACA,GAAgB,UAAY,oCAAoC,UAAY,qC,uCCK/DA,EAAmB,WAC9B,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,QAAO,MAClBC,GAAYD,EAAAA,EAAAA,QAAO,MACzB,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgDF,EAAAA,EAAAA,UAAS,IAAzD,eAAOG,EAAP,KAAyBC,EAAzB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,MAArC,eAAOK,EAAP,KAAeC,EAAf,KAEMC,GAAaT,EAAAA,EAAAA,QAAO,IAAIU,EAAAA,2BAE9BC,EAAAA,EAAAA,YAAU,WACV,IAAMC,EAASH,EAAWI,QAS1B,OAPAD,EAAOE,wBAAwBC,MAAK,SAAAC,GAClCZ,EAAWY,GACPA,EAAkBC,OAAS,GAC7BX,EAAoBU,EAAkB,GAAGE,SAE5C,IAEM,WACLN,EAAOO,OACR,CACF,GAAE,IA8CD,OACE,iBAAKC,UAAWC,EAAAA,UAAhB,WACE,gBAAKD,UAAWC,EAAAA,UAAhB,UACE,kBAAOC,IAAKvB,EAAUqB,UAAWC,EAAAA,eAGnC,iBAAKD,UAAWC,EAAAA,aAAhB,WACE,mBAAQD,UAAWC,EAAAA,OAAYE,QAnDnB,WACXlB,GAELI,EAAWI,QAAQW,sBACjBnB,EACAN,EAASc,QAFX,mCAGE,WAAON,EAAQkB,GAAf,iEACE,GAAIlB,EAAQ,CACVmB,QAAQC,IAAIpB,EAAOqB,MACnB,IACE/B,GAASgC,EAAAA,EAAAA,IAAoBtB,EAAOqB,MAuBrC,CAHC,MAAOE,GACPJ,QAAQI,MAAMA,GACdtB,EAAU,CAAEsB,MAAO,qIACpB,CACF,CA5BH,2CAHF,wDAkCD,EAcK,oBACA,mBAAQV,UAAWC,EAAAA,OAAYE,QAbpB,WACfd,EAAWI,QAAQM,QACnBX,EAAU,KACX,EAUK,uBAGF,iBAAKY,UAAWC,EAAAA,UAAhB,WACE,kBAAOU,QAAQ,eAAf,mCACA,mBACET,IAAKrB,EACL+B,GAAG,eACHC,MAAO5B,EACP6B,SAAU,SAAAC,GAAC,OAAI7B,EAAoB6B,EAAEC,OAAOH,MAAjC,EAJb,SAMG9B,EAAQkC,KAAI,SAAAC,GAAM,OACjB,mBAA8BL,MAAOK,EAAOpB,SAA5C,SACGoB,EAAOC,OAAP,iBAA0BD,EAAOpB,WADvBoB,EAAOpB,SADH,UAQvB,iBAAKE,UAAWC,EAAAA,UAAhB,WACE,uCACCd,EACCA,EAAOuB,OACL,uBAAIvB,EAAOuB,SAEX,iCACE,8EAAcvB,EAAOiC,SACrB,wEAAajC,EAAOkC,YACpB,8EAAclC,EAAOmC,eAIzB,gHAKT,E,UClHgB,SAASC,IAItB,OACA,SAAC,KAAD,WACE,4BACE,SAAC,KAAD,WACE,0CAEF,SAAC/C,EAAD,QAIL,C","sources":["webpack://vulpes-storage/./src/components/Scanner/ProductByBarcode/ProductByBarcode.module.css?7a4d","components/Scanner/ProductByBarcode/ProductByBarcode.js","pages/Scanner.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ProductByBarcode_container__I+StQ\",\"videoArea\":\"ProductByBarcode_videoArea__DWxuM\"};","import { useEffect, useRef, useState } from 'react';\nimport css from './ProductByBarcode.module.css';\nimport { BrowserMultiFormatReader } from '@zxing/library';\nimport { getProductByBarcode } from '../../../redux/products/operations';\nimport { useDispatch } from 'react-redux';\n\nexport const ProductByBarcode = () => {\n  const dispatch = useDispatch();\n  const videoRef = useRef(null);\n  const selectRef = useRef(null);\n  const [devices, setDevices] = useState([]);\n  const [selectedDeviceId, setSelectedDeviceId] = useState('');\n  const [result, setResult] = useState(null);\n\n  const codeReader = useRef(new BrowserMultiFormatReader());\n\n  useEffect(() => {\n  const reader = codeReader.current;\n\n  reader.listVideoInputDevices().then(videoInputDevices => {\n    setDevices(videoInputDevices);\n    if (videoInputDevices.length > 0) {\n      setSelectedDeviceId(videoInputDevices[0].deviceId);\n    }\n  });\n\n  return () => {\n    reader.reset();\n  };\n}, []);\n\n  const startScan = () => {\n    if (!selectedDeviceId) return;\n\n    codeReader.current.decodeFromVideoDevice(\n      selectedDeviceId,\n      videoRef.current,\n      async (result, err) => {\n        if (result) {\n          console.log(result.text)\n          try {\n            dispatch(getProductByBarcode(result.text))\n            // const res = await fetch(`/api/products/${result.text}`);\n            // const contentType = res.headers.get('content-type');\n\n            // if (contentType && contentType.includes('application/json')) {\n            //   const data = await res.json();\n\n            //   if (res.status === 200) {\n            //     setResult({\n            //       name: data.name,\n            //       article: data.article,\n            //       barcode: data.barcode,\n            //     });\n            //   } else {\n            //     setResult({ error: data.message });\n            //   }\n            // } else {\n            //   const text = await res.text();\n            //   console.error('Сервер вернул не JSON:', text);\n            // }\n          } catch (error) {\n            console.error(error);\n            setResult({ error: 'Ошибка запроса к серверу' });\n          }\n        }\n      }\n    );\n  };\n\n  const stopScan = () => {\n    codeReader.current.reset();\n    setResult(null);\n  };\n\n  return (\n    <div className={css.container}>\n      <div className={css.scanBlock}>\n        <video ref={videoRef} className={css.videoArea} />\n      </div>\n\n      <div className={css.buttonsBlock}>\n        <button className={css.button} onClick={startScan}>Start</button>\n        <button className={css.button} onClick={stopScan}>Reset</button>\n      </div>\n\n      <div className={css.scanBlock}>\n        <label htmlFor=\"sourceSelect\">Change video source:</label>\n        <select\n          ref={selectRef}\n          id=\"sourceSelect\"\n          value={selectedDeviceId}\n          onChange={e => setSelectedDeviceId(e.target.value)}\n        >\n          {devices.map(device => (\n            <option key={device.deviceId} value={device.deviceId}>\n              {device.label || `Camera ${device.deviceId}`}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <div className={css.scanBlock}>\n        <label>Result:</label>\n        {result ? (\n          result.error ? (\n            <p>{result.error}</p>\n          ) : (\n            <>\n              <p>Название: {result.name}</p>\n              <p>Артикул: {result.article}</p>\n              <p>Штрихкод: {result.barcode}</p>\n            </>\n          )\n        ) : (\n          <p>Нет результата</p>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { ProductByBarcode } from '../components/Scanner/ProductByBarcode/ProductByBarcode';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n// import { useSelector } from 'react-redux';\n// import { selectUser } from '../redux/auth/selectors';\n\n  \n  export default function Home() {\n\n    // const user = useSelector(selectUser);\n\n    return (\n    <HelmetProvider>\n      <div>\n        <Helmet>\n          <title>Scanner</title>\n        </Helmet>\n        <ProductByBarcode />\n      </div>\n    </HelmetProvider>\n    );\n  }"],"names":["ProductByBarcode","dispatch","useDispatch","videoRef","useRef","selectRef","useState","devices","setDevices","selectedDeviceId","setSelectedDeviceId","result","setResult","codeReader","BrowserMultiFormatReader","useEffect","reader","current","listVideoInputDevices","then","videoInputDevices","length","deviceId","reset","className","css","ref","onClick","decodeFromVideoDevice","err","console","log","text","getProductByBarcode","error","htmlFor","id","value","onChange","e","target","map","device","label","name","article","barcode","Home"],"sourceRoot":""}